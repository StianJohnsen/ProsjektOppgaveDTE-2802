// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProsjektOppgaveWebAPI.EntityFramework;

#nullable disable

namespace ProsjektOppgaveWebAPI.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231202141913_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.25");

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.BlogEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("UserFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserFk");

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.CommentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("PostFk")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PostFk");

                    b.HasIndex("UserFk");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.PostEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BlogFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlogFk");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.PostTagsEntity", b =>
                {
                    b.Property<long>("PostFk")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TagFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostFk", "TagFk");

                    b.HasIndex("TagFk");

                    b.ToTable("Post Tags", (string)null);
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.PostUsersEntity", b =>
                {
                    b.Property<long>("PostFk")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserFk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostFk", "UserFk");

                    b.HasIndex("UserFk");

                    b.ToTable("Post Users", (string)null);
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.TagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorRgb")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UserFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserFk");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            HashedPassword = "admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.BlogEntity", b =>
                {
                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.UserEntity", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.CommentEntity", b =>
                {
                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.PostEntity", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.UserEntity", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.PostEntity", b =>
                {
                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.BlogEntity", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.PostTagsEntity", b =>
                {
                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.PostEntity", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.TagEntity", "Tag")
                        .WithMany("Posts")
                        .HasForeignKey("TagFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.PostUsersEntity", b =>
                {
                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.PostEntity", "Post")
                        .WithMany("Users")
                        .HasForeignKey("PostFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.UserEntity", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.TagEntity", b =>
                {
                    b.HasOne("ProsjektOppgaveWebAPI.Database.Entities.UserEntity", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.BlogEntity", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.PostEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.TagEntity", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ProsjektOppgaveWebAPI.Database.Entities.UserEntity", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
