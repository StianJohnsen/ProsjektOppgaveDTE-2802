@page "/registration"
@using System.Collections
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-md-4">
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h4>Registration</h4>
            </div>
            <div class="card-body">
                <input type="text" class="form-control" placeholder="username" @bind="_username"/><br/>
                <input type="password" class="form-control" placeholder="password" @bind="_password"/><br/>
                <input type="password" class="form-control" placeholder="confirm password" @bind="_confirmPassword"/>
                <div class="alert alert-danger @_showErrorClass">Password doesn't confirm</div>
            </div>
            <div class="card-footer">
                <input type="button" class="btn btn-success" value="Sign Up" @onclick="HandleSubmitClick"/>
            </div>
        </div>
    </div>
    <div class="col-md-4"></div>
</div>


@code {
    private string _username;
    private string _password;
    private string _confirmPassword;
    private string _showErrorClass = "d-none";
    
    private HttpClient _httpClient = new HttpClient();

    private async Task HandleSubmitClick(MouseEventArgs e)
    {
        _showErrorClass = String.Empty;
        
        StateHasChanged();
        if (e.Button != 0)
        {
            return;
        }
        if (_password != _confirmPassword)
        {
            _showErrorClass = String.Empty;
            StateHasChanged();
            return;
        }
        else
        {
            _showErrorClass = "d-none";
        }

        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("https://localhost:7022/api/Auth/SignUp", new
        {
            Username = _username,
            Password = _password,
            Comments = new ArrayList(),
            Blogs = new ArrayList(),
            Posts = new ArrayList(),
            Tags = new ArrayList()
        });
        
        string jsonResponse = await response.Content.ReadAsStringAsync();
        ApiResponse apiResponse = JsonConvert.DeserializeObject<ApiResponse>(jsonResponse);
        JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", apiResponse.Token);
        string token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");

    }

    private class ApiResponse
    {
        public string Token { get; set; }
    }
    
}
